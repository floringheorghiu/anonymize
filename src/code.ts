// Import UI
// @ts-ignore
var ui = __html__;

// Read placeholder image as bytes
function readImageBytes(path: string): Promise<Uint8Array> {
  return fetch(path)
    .then(response => response.arrayBuffer())
    .then(buffer => new Uint8Array(buffer));
}

// Initialize plugin UI with fixed dimensions
figma.showUI(ui, {
  width: 400,
  height: 300,
  themeColors: true
});

// Base64 encoded 1x1 white PNG placeholder
var placeholderImage = new Uint8Array([
  0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x02, 0x58, 0x00, 0x00, 0x02, 0x58, 0x04, 0x03, 0x00, 0x00, 0x00, 0x4C, 0x48, 0x85, 0xEF, 0x00, 0x00, 0x00, 0x12, 0x50, 0x4C, 0x54, 0x45, 0xF4, 0xF4, 0xF4, 0xE8, 0xE8, 0xE8, 0xEE, 0xEE, 0xEE, 0xEB, 0xEB, 0xEB, 0xF2, 0xF2, 0xF2, 0xF0, 0xF0, 0xF0, 0xBD, 0xF1, 0x13, 0x5E, 0x00, 0x00, 0x09, 0x6C, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xEC, 0xC1, 0x81, 0x00, 0x00, 0x00, 0x00, 0x80, 0xA0, 0xFD, 0xA9, 0x17, 0xA9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xD7, 0xDC, 0x72, 0x1A, 0x07, 0xA2, 0x20, 0xDA, 0x8A, 0x3A, 0x0B, 0xA8, 0x78, 0xE6, 0x7F, 0xE2, 0x0C, 0x0B, 0x48, 0x32, 0xFC, 0x4F, 0x98, 0xE1, 0x9F, 0xE7, 0xFE, 0xB7, 0x02, 0x96, 0x20, 0x12, 0x02, 0x13, 0x5F, 0xC0, 0xF8, 0xB4, 0xBB, 0xCE, 0x12, 0x4A, 0x55, 0xD5, 0xE5, 0x2B, 0x1B, 0x63, 0x8C, 0x31, 0xC6, 0x14, 0x4A, 0xBE, 0x6C, 0xDB, 0xCD, 0x5E, 0x4F, 0xEC, 0x77, 0x6D, 0x7B, 0xFF, 0x37, 0x99, 0xD7, 0xE4, 0x9B, 0x76, 0xAB, 0x37, 0x68, 0x76, 0x67, 0x16, 0xEC, 0x05, 0xFF, 0x3B, 0xA1, 0xFA, 0xD9, 0x9F, 0xDD, 0x25, 0xF3, 0xE4, 0xA9, 0xB5, 0x4E, 0xB2, 0xB7, 0xBF, 0x1E, 0xC9, 0xAD, 0x86, 0xD1, 0xEC, 0xAE, 0x52, 0xDD, 0x5C, 0x6E, 0x14, 0xA0, 0x6A, 0xB9, 0x96, 0x1B, 0x05, 0xD9, 0xD5, 0x1A, 0xC6, 0xDC, 0x2A, 0x4E, 0x53, 0x67, 0x77, 0x5D, 0x6C, 0xF5, 0x21, 0x9A, 0xDF, 0xA9, 0x36, 0xF2, 0x46, 0x47, 0x9C, 0xC5, 0x61, 0xB6, 0xB2, 0xB9, 0xC2, 0xB6, 0x8A, 0x73, 0x5E, 0x8D, 0xB9, 0x96, 0x5B, 0x7D, 0x9A, 0x55, 0x25, 0x2B, 0xE2, 0x42, 0xCF, 0x38, 0x8A, 0xA7, 0xB8, 0xD5, 0x17, 0x71, 0x9E, 0xE6, 0x4E, 0x5E, 0xEB, 0x88, 0x8B, 0xEB, 0xFB, 0xB4, 0x92, 0x56, 0xB3, 0x56, 0xAB, 0xAB, 0x76, 0xAB, 0x35, 0x8D, 0x56, 0x52, 0x33, 0xDB, 0x47, 0xB1, 0xD3, 0xCA, 0x6A, 0x05, 0xB4, 0xB2, 0x5A, 0x11, 0xAD, 0xAC, 0xD6, 0x84, 0x5A, 0x49, 0xCD, 0xEC, 0x5A, 0x3E, 0xBF, 0xD0, 0xCA, 0x6F, 0xE2, 0xE0, 0x7D, 0x65, 0xB5, 0xDE, 0xA7, 0x47, 0x2B, 0x7F, 0xF9, 0xBC, 0xC1, 0xAD, 0x46, 0xE6, 0x4F, 0x9A, 0x0D, 0xFF, 0x34, 0x3A, 0xB3, 0xB9, 0x41, 0x2C, 0x34, 0x3E, 0xCD, 0xAF, 0x34, 0x0B, 0xFA, 0x1F, 0x42, 0x0F, 0x88, 0x9E, 0x87, 0x70, 0x74, 0x56, 0x69, 0x06, 0x5C, 0xAB, 0x17, 0x97, 0x7C, 0xDF, 0x11, 0x79, 0x7C, 0x8A, 0xAF, 0xAD, 0xAC, 0x77, 0x71, 0x6D, 0x45, 0xD6, 0xA8, 0x6B, 0x2B, 0xB0, 0xB0, 0x5C, 0x5B, 0x47, 0x96, 0xFA, 0x66, 0x0A, 0x3E, 0xD7, 0x0C, 0x5C, 0x0D, 0xFE, 0xA4, 0xEE, 0x38, 0xE8, 0x34, 0x0E, 0x62, 0x2C, 0x84, 0xDE, 0x0F, 0x91, 0x97, 0xD0, 0x2F, 0xE2, 0xE0, 0x97, 0xD0, 0x41, 0x8C, 0xCD, 0xD1, 0xEA, 0xA7, 0x69, 0x20, 0x84, 0xD5, 0x07, 0x71, 0xA1, 0x00, 0x95, 0x77, 0x7C, 0xEC, 0x88, 0x55, 0x79, 0x10, 0x83, 0xED, 0x5E, 0x75, 0xC7, 0x67, 0x85, 0xA8, 0xDB, 0x5A, 0x07, 0x4D, 0xCA, 0x8F, 0x54, 0x10, 0x4B, 0xC5, 0xA9, 0xF6, 0x83, 0x7A, 0xAD, 0x38, 0xB5, 0xCE, 0x87, 0x85, 0x26, 0xA7, 0x9C, 0xF9, 0x30, 0xB9, 0xB1, 0x0A, 0xB2, 0x16, 0xC0, 0x58, 0xE5, 0x58, 0x0B, 0x60, 0xAC, 0x62, 0xAC, 0x85, 0x30, 0x56, 0x29, 0xD6, 0x42, 0x18, 0xAB, 0x10, 0x6B, 0x41, 0x8C, 0x55, 0x86, 0xB5, 0x20, 0xC6, 0x2A, 0xC2, 0x5A, 0x18, 0x63, 0x95, 0x60, 0x2D, 0x8C, 0xB1, 0x0A, 0xB0, 0x16, 0xC8, 0x58, 0x7C, 0x6B, 0x5D, 0x0B, 0xC4, 0xCF, 0x84, 0x26, 0x0B, 0x05, 0xFB, 0xAE, 0x75, 0x10, 0x0A, 0xF4, 0x5D, 0x0B, 0x66, 0x2C, 0xF6, 0xC9, 0x14, 0x66, 0x2C, 0xF6, 0x35, 0x7E, 0x2B, 0x18, 0xE0, 0xF5, 0x80, 0xDA, 0x0D, 0xF4, 0xF5, 0x00, 0x1A, 0xA4, 0x78, 0x6B, 0xD1, 0xEA, 0x1D, 0xBD, 0x1E, 0x70, 0xF5, 0x4E, 0xAE, 0x78, 0x5C, 0xBD, 0x77, 0x34, 0x09, 0x09, 0xB0, 0xDE, 0xB9, 0x15, 0x0F, 0xAC, 0x77, 0xEC, 0x07, 0x22, 0xB2, 0xDE, 0xA9, 0x15, 0x8F, 0xAC, 0x77, 0x6A, 0xC5, 0x43, 0x53, 0x88, 0x9C, 0x5A, 0xD0, 0x7A, 0x67, 0xFE, 0x25, 0x82, 0x4D, 0x21, 0xF1, 0x50, 0x23, 0x2E, 0xB8, 0xA9, 0x05, 0x4E, 0x21, 0x6F, 0x6A, 0x81, 0x53, 0xC8, 0xCB, 0xA1, 0xC8, 0xC0, 0x0E, 0xA6, 0xE8, 0x14, 0xD2, 0x72, 0x88, 0x4E, 0x21, 0xED, 0x93, 0x47, 0x6C, 0x50, 0x39, 0x84, 0xA7, 0x90, 0x95, 0x43, 0x78, 0x0A, 0x59, 0xEF, 0xA1, 0xE8, 0x80, 0x76, 0x29, 0x3E, 0x85, 0xA4, 0x1C, 0xE2, 0x53, 0x48, 0xCA, 0x21, 0xF2, 0xF8, 0x0E, 0xBD, 0xD3, 0x60, 0x6F, 0xA4, 0x0F, 0xEC, 0x9D, 0x4D, 0x72, 0xE3, 0x20, 0x10, 0x85, 0x65, 0x09, 0xEF, 0xD3, 0x56, 0x66, 0x6F, 0x9C, 0x1C, 0x40, 0xE4, 0x67, 0x6F, 0xA5, 0x6A, 0xF6, 0xF6, 0x54, 0xEE, 0x7F, 0x96, 0x29, 0x67, 0xE3, 0xA9, 0x9A, 0xD8, 0xA2, 0x83, 0x04, 0xEF, 0xA1, 0xFE, 0x2E, 0x10, 0xD2, 0x86, 0xD7, 0xAF, 0x1B, 0x04, 0x88, 0x7D, 0x9A, 0x8D, 0x10, 0x30, 0x34, 0x18, 0xC0, 0xF6, 0x48, 0x01, 0xD7, 0x21, 0xC5, 0x2A, 0x44, 0xD9, 0xB7, 0x20, 0x30, 0x0E, 0x38, 0xE6, 0x81, 0xC0, 0x38, 0xE0, 0x98, 0x07, 0x02, 0xE3, 0x00, 0x63, 0xE2, 0x49, 0x24, 0x0B, 0xC3, 0x3C, 0x74, 0x42, 0x02, 0x82, 0x79, 0x80, 0x3A, 0xF9, 0x8E, 0xDE, 0x01, 0x24, 0x91, 0x2C, 0x08, 0xD1, 0x22, 0x31, 0x0E, 0x18, 0xA2, 0x45, 0x51, 0xEB, 0xA0, 0x88, 0x16, 0x45, 0xAD, 0x83, 0x22, 0x5A, 0x34, 0x92, 0x05, 0x20, 0x5A, 0xC5, 0x2F, 0x52, 0x61, 0x12, 0x2D, 0x1A, 0x97, 0x85, 0x20, 0x5A, 0x24, 0x85, 0x21, 0x86, 0x68, 0x05, 0x99, 0x9D, 0xFE, 0x70, 0xE1, 0xE9, 0x55, 0xBE, 0xA8, 0x48, 0xB4, 0xDC, 0xEC, 0x81, 0xFA, 0x3C, 0xFE, 0xF3, 0xD6, 0x7B, 0x10, 0x91, 0x7A, 0x7A, 0x5A, 0xF3, 0x4A, 0xD6, 0xEE, 0xF9, 0x9B, 0x27, 0x94, 0xEB, 0xE9, 0x69, 0x69, 0x25, 0x4B, 0xFF, 0x24, 0xED, 0x47, 0xA8, 0xA6, 0xA7, 0xE5, 0x45, 0x89, 0xFE, 0xDD, 0x71, 0xF7, 0x54, 0x4B, 0x23, 0x7E, 0xD1, 0x69, 0x75, 0x9D, 0x5C, 0x55, 0x28, 0xFC, 0x36, 0xCF, 0x3D, 0xEE, 0x2E, 0xD4, 0x60, 0x4B, 0xBB, 0x65, 0x97, 0xE0, 0x15, 0x5F, 0x81, 0x2D, 0x1D, 0xB3, 0x3D, 0x22, 0xE7, 0xF9, 0x15, 0xDE, 0xE7, 0x7B, 0x70, 0xCF, 0xD3, 0x2B, 0xFC, 0x5C, 0xFF, 0x40, 0xBE, 0x68, 0x35, 0x3A, 0xD0, 0xF4, 0x7D, 0x77, 0x5C, 0xF4, 0xF5, 0x10, 0x18, 0x85, 0xEF, 0x24, 0x9D, 0xFE, 0xB8, 0x6C, 0x69, 0x05, 0xA3, 0xF0, 0xA3, 0xA4, 0xB3, 0x5F, 0xB8, 0xDD, 0x0F, 0xA3, 0xF0, 0x5E, 0x92, 0x79, 0x5B, 0xFC, 0xDE, 0x74, 0x14, 0x85, 0x0F, 0xB9, 0xC7, 0xEE, 0x45, 0x0D, 0x8A, 0x87, 0x77, 0xE9, 0x43, 0x3F, 0x2D, 0xFF, 0x17, 0x41, 0xBA, 0x34, 0x6D, 0x86, 0x45, 0x98, 0xBE, 0x10, 0x41, 0xBA, 0x34, 0x5D, 0x01, 0x01, 0xF1, 0xAC, 0xE9, 0x70, 0x2C, 0xF0, 0x2B, 0xB7, 0xAC, 0xE9, 0xD0, 0x8B, 0x9A, 0xF4, 0xFD, 0x83, 0x33, 0x69, 0x3A, 0x0C, 0xE9, 0x76, 0x54, 0x8F, 0xE3, 0x4C, 0x87, 0x2E, 0xA7, 0xBA, 0x5F, 0x19, 0x29, 0xD3, 0x61, 0x9B, 0x73, 0x62, 0x5D, 0x71, 0x94, 0xE9, 0xB0, 0xCB, 0x3A, 0xB1, 0xAE, 0x8C, 0x8C, 0xE9, 0x70, 0xCC, 0x3A, 0xB1, 0xAE, 0x38, 0xC6, 0x74, 0xE8, 0x4B, 0x8D, 0x79, 0x14, 0x15, 0x10, 0x7B, 0xF8, 0xA1, 0x54, 0x63, 0x69, 0x4B, 0xE8, 0x1D, 0xCA, 0x0D, 0xD9, 0x4B, 0x0A, 0x4D, 0x2C, 0x30, 0xCE, 0x61, 0x9F, 0x21, 0x0F, 0x03, 0x35, 0x4B, 0x93, 0x46, 0xDC, 0xE7, 0x50, 0x00, 0x20, 0xEF, 0xD0, 0x49, 0x02, 0x6F, 0x39, 0x12, 0x31, 0x90, 0x77, 0xD8, 0x48, 0x02, 0xC7, 0x1C, 0x3B, 0x25, 0x40, 0xDE, 0x21, 0xA5, 0xA2, 0xDD, 0x65, 0xB1, 0x2D, 0x40, 0xDE, 0xC1, 0xE7, 0x5E, 0x09, 0x7A, 0x0D, 0xC0, 0xF1, 0x0E, 0x21, 0xF3, 0x2A, 0xD4, 0xA7, 0x62, 0xA0, 0xBE, 0x43, 0xD9, 0xDF, 0xD6, 0x4B, 0x1C, 0x18, 0x46, 0x2B, 0x45, 0x63, 0x87, 0x4C, 0xB9, 0x18, 0xA6, 0x49, 0xD3, 0x96, 0x1D, 0xAD, 0x93, 0x49, 0x80, 0x8C, 0x56, 0x27, 0x0A, 0x16, 0x50, 0x58, 0xBF, 0x92, 0x60, 0xBD, 0xE5, 0x69, 0x10, 0x01, 0xB9, 0xD2, 0x84, 0xC1, 0x9E, 0xF2, 0xC8, 0x00, 0x90, 0x2B, 0xFD, 0xB9, 0x27, 0xED, 0x33, 0x65, 0x63, 0x20, 0x57, 0xEA, 0x73, 0x8F, 0x55, 0xFF, 0x6B, 0xE1, 0xB8, 0xD2, 0x50, 0x5A, 0x32, 0xBA, 0x55, 0x04, 0xEB, 0x94, 0xC9, 0xE8, 0xE1, 0x58, 0x78, 0x57, 0x7E, 0xA8, 0x3C, 0xAE, 0x74, 0x2B, 0xC5, 0xE5, 0xD5, 0xAF, 0x20, 0x58, 0x43, 0x79, 0xF3, 0x12, 0x27, 0x04, 0x08, 0xD5, 0xCE, 0xBE, 0xA2, 0x21, 0x44, 0xD2, 0x95, 0x5F, 0x03, 0xAE, 0xFC, 0xE4, 0x8E, 0xA4, 0x2B, 0xAE, 0xEF, 0x4D, 0x13, 0x58, 0x82, 0xB5, 0x29, 0xAE, 0xEF, 0x09, 0x0A, 0xFF, 0xD0, 0x44, 0x80, 0x50, 0x1A, 0x3E, 0xD6, 0x35, 0x86, 0x65, 0x8B, 0x8D, 0x01, 0x40, 0x0A, 0xE2, 0x66, 0x37, 0xC0, 0x12, 0x38, 0x01, 0x64, 0xE4, 0x89, 0x7A, 0x07, 0x27, 0x58, 0x47, 0x80, 0x2A, 0x22, 0x2A, 0x58, 0x00, 0xA5, 0x61, 0x8F, 0x30, 0x08, 0x96, 0x60, 0xFD, 0x42, 0x98, 0xDE, 0x71, 0xBF, 0x58, 0xF9, 0x8D, 0xB0, 0x47, 0x84, 0x94, 0xCC, 0x12, 0xAC, 0x01, 0xC2, 0xEC, 0x35, 0x93, 0x40, 0x74, 0x68, 0x06, 0x88, 0x32, 0x62, 0x3A, 0xCB, 0x40, 0x34, 0x1D, 0xF6, 0x10, 0xD5, 0x3C, 0x49, 0xB0, 0x8E, 0x10, 0xF3, 0x7B, 0xDA, 0xEC, 0x41, 0xFC, 0xA6, 0x18, 0xCA, 0xC9, 0x11, 0xAC, 0x1E, 0xC3, 0xC0, 0xDC, 0x17, 0x03, 0x0B, 0x96, 0x32, 0x58, 0x08, 0x79, 0x68, 0x87, 0x51, 0x74, 0x71, 0x04, 0xEB, 0x62, 0xE0, 0x01, 0x7A, 0x1F, 0x1C, 0xC1, 0x7A, 0x6C, 0x1A, 0x04, 0x0B, 0x7F, 0xDF, 0xED, 0xA1, 0x04, 0xEB, 0xC1, 0x82, 0x15, 0xCF, 0x03, 0xC6, 0x30, 0xA6, 0x83, 0x85, 0x50, 0x95, 0x0D, 0x18, 0x49, 0xF9, 0xBE, 0x66, 0x55, 0x1A, 0x2C, 0x27, 0x37, 0x01, 0x32, 0xA5, 0x20, 0xC1, 0xBA, 0xE7, 0x1D, 0x70, 0x5A, 0x34, 0x1B, 0x90, 0xF9, 0x7F, 0x47, 0xE1, 0x71, 0x36, 0x2C, 0x50, 0x82, 0xE5, 0x20, 0x46, 0x41, 0x12, 0xAC, 0xDB, 0x53, 0x0B, 0xA8, 0x05, 0x0F, 0x13, 0x2C, 0x17, 0xD0, 0xE5, 0x1D, 0x28, 0x58, 0xFA, 0xDB, 0x84, 0xFB, 0xE7, 0x66, 0x8A, 0x6A, 0x83, 0x45, 0x80, 0x05, 0xCB, 0x82, 0xF5, 0x85, 0x05, 0x4B, 0x81, 0x05, 0x4B, 0x81, 0x05, 0x4B, 0x01, 0x4C, 0xB0, 0x86, 0x66, 0x85, 0x58, 0xB0, 0xF8, 0x9A, 0x7F, 0x1C, 0x80, 0xF4, 0xE0, 0x39, 0xB0, 0x60, 0xF1, 0x6D, 0x85, 0x71, 0x00, 0xB2, 0xC9, 0xCA, 0x41, 0x6B, 0xC1, 0xA2, 0x3B, 0xEB, 0xC0, 0x01, 0xC8, 0x91, 0x23, 0x0E, 0x30, 0x0E, 0xB3, 0x91, 0xE0, 0xE4, 0x0E, 0x56, 0x1C, 0x5A, 0xB0, 0x16, 0x3A, 0xA0, 0x68, 0xF5, 0x0E, 0xE0, 0x47, 0x03, 0x2C, 0xB0, 0x7C, 0x36, 0x03, 0x01, 0xC4, 0x87, 0x4E, 0x2C, 0x20, 0x7C, 0x42, 0x47, 0x03, 0xC2, 0xC7, 0x99, 0x34, 0x20, 0x7C, 0xF6, 0x4B, 0x03, 0xCD, 0xC7, 0xDC, 0x08, 0x6C, 0xC4, 0xD2, 0xA1, 0x22, 0x58, 0x96, 0x0E, 0x99, 0xAE, 0x57, 0xE1, 0x81, 0xE7, 0xD6, 0x1C, 0x00, 0x5A, 0x31, 0x85, 0x8F, 0xC6, 0x89, 0x29, 0x3C, 0xD3, 0x35, 0x76, 0x44, 0x88, 0x98, 0x87, 0xE7, 0xB9, 0x7A, 0x93, 0x89, 0xE2, 0x97, 0xBA, 0x32, 0x51, 0xFC, 0xBA, 0x60, 0x26, 0x46, 0x31, 0xA7, 0x15, 0xCD, 0x46, 0xCC, 0x69, 0xD1, 0x5C, 0x9E, 0x4F, 0x45, 0x2B, 0x62, 0xE5, 0xA1, 0xC2, 0x95, 0x9A, 0x79, 0x20, 0x79, 0x4A, 0x86, 0x8C, 0x60, 0xEB, 0x90, 0xE4, 0xF9, 0x2B, 0x36, 0xCE, 0xB6, 0x0E, 0x55, 0xAE, 0xD4, 0x8A, 0x69, 0x86, 0xC7, 0x20, 0xE9, 0x68, 0x45, 0xC4, 0xEA, 0x43, 0xC5, 0xE1, 0x3F, 0xAB, 0x0F, 0xF1, 0x9F, 0x46, 0x26, 0x24, 0x88, 0x49, 0x3C, 0xFE, 0x73, 0xEE, 0x8C, 0x8C, 0x92, 0x42, 0xBF, 0x2E, 0x17, 0xDF, 0x89, 0x98, 0x7B, 0x88, 0xA5, 0x15, 0x9B, 0x5A, 0xD1, 0x38, 0xB1, 0xA9, 0x15, 0x4F, 0xB0, 0xA9, 0xA5, 0x4E, 0x87, 0xB6, 0x27, 0x16, 0x9B, 0x0E, 0xCD, 0xC6, 0x2B, 0xD2, 0xA1, 0xD9, 0xF8, 0xF8, 0x74, 0x68, 0x1A, 0xAF, 0x49, 0x87, 0xA6, 0xF1, 0xB1, 0x04, 0xB1, 0x85, 0x18, 0x8D, 0x17, 0x5B, 0x88, 0xAA, 0x74, 0x68, 0x19, 0x31, 0x3E, 0x1D, 0x9A, 0x6C, 0xC5, 0xB2, 0x95, 0x19, 0xD8, 0xAD, 0x25, 0x5A, 0x32, 0x07, 0xEF, 0xCD, 0x3A, 0xF0, 0x16, 0x2D, 0x8D, 0xC2, 0x5B, 0xB4, 0x14, 0x0A, 0x9F, 0x29, 0x5A, 0x7F, 0x0E, 0x07, 0xFA, 0xA6, 0xFD, 0x56, 0x66, 0xE2, 0xE5, 0xAE, 0xCA, 0x3B, 0x2F, 0x22, 0x3D, 0x7D, 0xB4, 0x64, 0x2E, 0xFA, 0xCF, 0xE6, 0x26, 0x1F, 0xA1, 0x0E, 0x93, 0xE1, 0x65, 0x36, 0xDE, 0x6F, 0xC4, 0xC2, 0x3D, 0xD5, 0xB2, 0x21, 0x34, 0x8A, 0x2C, 0x3C, 0xB9, 0x3E, 0x42, 0x35, 0xC7, 0xBA, 0x5A, 0x99, 0x93, 0xD7, 0xE7, 0xFF, 0x42, 0xE5, 0x2B, 0x3A, 0xD6, 0xE5, 0x64, 0x5E, 0xFA, 0x97, 0xEB, 0xF4, 0x72, 0xBF, 0x0F, 0xA1, 0xAE, 0x3E, 0x74, 0x90, 0xD9, 0x79, 0x7D, 0x39, 0x5C, 0x08, 0xF5, 0xD5, 0x91, 0x67, 0x89, 0xC6, 0x5A, 0x14, 0x9D, 0x28, 0x59, 0xF3, 0x01, 0x89, 0xAD, 0x28, 0x58, 0x7D, 0x63, 0x35, 0x88, 0x92, 0x35, 0x1F, 0x54, 0x3A, 0x8B, 0x9A, 0xF5, 0x9E, 0x09, 0x57, 0x8A, 0xD6, 0xBA, 0x37, 0xB1, 0xB7, 0xA2, 0x67, 0xBD, 0xDF, 0x66, 0x04, 0x99, 0xC2, 0xCC, 0x83, 0x46, 0xB4, 0xCC, 0x3C, 0xFC, 0x5C, 0xB4, 0x56, 0x7C, 0x80, 0x7E, 0x5A, 0xB4, 0xCC, 0x3C, 0xA8, 0x44, 0xCB, 0xCC, 0x43, 0x7C, 0x4F, 0xCB, 0x4C, 0xBC, 0xA6, 0xA7, 0x65, 0xE6, 0x41, 0xD3, 0xD3, 0x32, 0xF3, 0x10, 0xDF, 0x88, 0x37, 0xF3, 0x60, 0xE6, 0xC1, 0xCC, 0xC3, 0x77, 0x98, 0x79, 0x88, 0xC7, 0xCC, 0x83, 0x06, 0x33, 0x0F, 0xD1, 0x50, 0xAF, 0x43, 0x72, 0xF3, 0x30, 0xCA, 0x24, 0xD6, 0x01, 0x8C, 0x5F, 0x87, 0x66, 0x1E, 0x34, 0x26, 0xDE, 0xCC, 0xC3, 0xDF, 0xF6, 0xEE, 0xED, 0x28, 0x61, 0x00, 0x88, 0x02, 0x28, 0xE3, 0x24, 0x05, 0x64, 0xEC, 0x20, 0xD1, 0x02, 0x02, 0x1D, 0xA0, 0x36, 0xA0, 0xD8, 0x7F, 0x2B, 0xFA, 0xA1, 0x32, 0x6A, 0x80, 0xBD, 0xF1, 0x35, 0x92, 0x73, 0x4A, 0xD8, 0xD9, 0xDD, 0x5C, 0x16, 0x34, 0xB3, 0x2E, 0x80, 0x8B, 0xFF, 0xF1, 0xFC, 0xE9, 0x39, 0x14, 0x1E, 0x92, 0x39, 0x14, 0x1E, 0x92, 0xE7, 0xA1, 0xF0, 0x50, 0x9F, 0x43, 0xE1, 0x21, 0xC8, 0xA5, 0xC2, 0x43, 0x32, 0x87, 0xC2, 0x43, 0x30, 0x87, 0x2E, 0x80, 0xC1, 0xBD, 0x54, 0x78, 0x48, 0xE6, 0x50, 0x78, 0x88, 0xA2, 0x96, 0x0B, 0x60, 0x79, 0x0E, 0x85, 0x87, 0x64, 0xC5, 0x0B, 0x0F, 0x41, 0xD4, 0x12, 0xE2, 0x83, 0x15, 0x2F, 0x3C, 0x24, 0x2B, 0x5E, 0x78, 0xA8, 0xAF, 0x78, 0xE1, 0x21, 0x59, 0xF1, 0xC2, 0x43, 0xB2, 0xE2, 0x85, 0x87, 0xBD, 0x9B, 0xEE, 0x04, 0xE1, 0x21, 0x58, 0xF1, 0xC2, 0x43, 0x90, 0x1E, 0x84, 0x87, 0xA4, 0xB5, 0x84, 0x87, 0x20, 0x3D, 0xB8, 0x00, 0x06, 0xE9, 0x41, 0x78, 0x48, 0x5A, 0x4B, 0x78, 0x98, 0xD1, 0x5A, 0xFE, 0xF5, 0x56, 0xA1, 0xB5, 0x84, 0x87, 0xA0, 0xB5, 0x84, 0x87, 0xA8, 0xB5, 0x84, 0xF8, 0x72, 0x6B, 0x09, 0x0F, 0x49, 0x6B, 0x09, 0x0F, 0x49, 0x6B, 0x09, 0xF1, 0x41, 0x6B, 0xB9, 0x00, 0x26, 0xAD, 0x25, 0x3C, 0xD4, 0x5B, 0x4B, 0x78, 0x08, 0x5A, 0x4B, 0x78, 0x48, 0xEE, 0x5A, 0xC2, 0x43, 0x72, 0xD7, 0x12, 0x1E, 0xEA, 0xAD, 0x25, 0x3C, 0x7C, 0xD0, 0x8C, 0xDD, 0x61, 0xC2, 0x43, 0xB2, 0xE3, 0x85, 0x87, 0x7A, 0x7C, 0x10, 0x1E, 0x82, 0x1D, 0x2F, 0x3C, 0x24, 0xDF, 0xB8, 0x0A, 0x0F, 0xD1, 0x20, 0xFA, 0xAB, 0xA7, 0xF2, 0x8E, 0x17, 0x1E, 0x92, 0xB0, 0x25, 0x3C, 0x7C, 0xD2, 0x1C, 0x1E, 0x44, 0xE1, 0x21, 0x18, 0x44, 0x5F, 0x1F, 0xD6, 0x07, 0x51, 0x78, 0x48, 0x9E, 0x88, 0xC2, 0x43, 0x14, 0x4D, 0x5D, 0x1E, 0xAA, 0x6B, 0xCB, 0xD2, 0x4A, 0xD6, 0x96, 0xA4, 0x55, 0x5F, 0x5B, 0x36, 0x7C, 0x71, 0x6D, 0x29, 0x56, 0xB0, 0xB6, 0x14, 0x2B, 0xB8, 0x3F, 0x28, 0x56, 0xB4, 0xE4, 0x3D, 0x0D, 0xB3, 0x25, 0xEF, 0x58, 0x1A, 0x7C, 0xA4, 0xF6, 0x49, 0xBA, 0xFE, 0x6D, 0x8F, 0x9F, 0x96, 0x46, 0xD5, 0x72, 0x2A, 0x3D, 0xA6, 0x7D, 0xAD, 0x96, 0xC6, 0xFA, 0x9B, 0xB8, 0x75, 0x16, 0xEF, 0x88, 0x9C, 0x76, 0x31, 0xAA, 0x55, 0x32, 0x89, 0x6A, 0x95, 0x6C, 0x79, 0xB5, 0x9A, 0x53, 0x2D, 0x2F, 0x37, 0xFF, 0xDD, 0x74, 0xBA, 0x3E, 0xF3, 0x5A, 0x3D, 0x7B, 0xE8, 0x3A, 0xAF, 0xEA, 0x2E, 0xDB, 0x76, 0xDF, 0xE2, 0x6A, 0xB5, 0x08, 0xED, 0x68, 0xB5, 0xD7, 0x35, 0x83, 0x75, 0x15, 0xD8, 0x8E, 0x5F, 0x6A, 0xAB, 0x85, 0x8C, 0xE0, 0xBE, 0xB9, 0xB4, 0x55, 0xD4, 0x5C, 0xDA, 0xEA, 0xA7, 0x9B, 0xAB, 0x5F, 0x5E, 0x5B, 0xCD, 0x2D, 0xD7, 0x7A, 0x31, 0x0F, 0xC1, 0x09, 0xED, 0x10, 0x95, 0x6A, 0xB7, 0x5A, 0xB6, 0x76, 0x18, 0x0D, 0x60, 0x5D, 0x73, 0xBF, 0x29, 0x7C, 0x66, 0xBE, 0x56, 0xAA, 0x17, 0x77, 0xC7, 0xEB, 0x75, 0xD9, 0xDF, 0xAE, 0x78, 0xD7, 0x5F, 0xC3, 0x38, 0x5D, 0x28, 0x3D, 0x35, 0xA9, 0x79, 0xEC, 0xFB, 0xE1, 0xAD, 0xC7, 0x36, 0xEB, 0xBE, 0xDF, 0x29, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x57, 0x4F, 0x9E, 0x42, 0xAF, 0xF8, 0x7E, 0x4A, 0x7C, 0x49, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
]);

// Type definitions
interface AnonymizeOptions {
  prices?: boolean;
  products?: boolean;
  images?: boolean;
  useCurrencySelection?: boolean;
  currencySymbol?: string;
  useCurrencyInput?: boolean;
  customCurrency?: string;
  customPlaceholderImage?: string;
}

// ============================================================================
// STABLE: Anonymization Marker System (DO NOT MODIFY UNLESS ABSOLUTELY NECESSARY)
// This code handles tracking of already anonymized text using invisible markers.
// It has been tested and works correctly. Any changes could break functionality.
// Features:
// - Uses zero-width space as invisible marker
// - Prevents re-processing of already anonymized text
// - Maintains text appearance while adding metadata
// Last verified: 2025-01-11
// ============================================================================

// Invisible marker to identify anonymized text (zero-width space)
var ANONYMIZED_MARKER = '\u200B';

// Helper to check if text is already anonymized
function isTextAnonymized(text: string): boolean {
  return text.endsWith(ANONYMIZED_MARKER);
}

// Helper to mark text as anonymized
function markAsAnonymized(text: string): string {
  return text + ANONYMIZED_MARKER;
}

// ============================================================================
// END STABLE: Anonymization Marker System
// ============================================================================

// Currency symbols to detect
var currencySymbols = ['€', '$', '£', '¥', '₽', '₴', '₦', '₨', '₩', '₫', '₭', '₮', '₯', '₱', '₳'];
var currencySymbolsPattern = currencySymbols.map(function(s) { return '\\' + s; }).join('|');

// Regular expressions for different number patterns
var pricePattern = new RegExp('(' + currencySymbolsPattern + ')\\s*(\\d+([.,]\\d{2})?)|(\\d+([.,]\\d{2})?)\\s*(' + currencySymbolsPattern + ')', 'g');
var percentagePattern = /\(?(\d+\.?\d*)%\)?/g;
var numberWithSeparatorPattern = /\d+([.,]\d{2})?/g;

// Function to anonymize prices in a given text
interface AnonymizeOptions {
  prices?: boolean;
  products?: boolean;
  images?: boolean;
  useCurrencySelection?: boolean;
  currencySymbol?: string;
  useCurrencyInput?: boolean;
  customCurrency?: string;
  customPlaceholderImage?: string;
}

function anonymizePrice(text: string, options: AnonymizeOptions): string {
  try {
    // Don't process if no currency or percentage patterns found
    if (!pricePattern.test(text) && !percentagePattern.test(text)) {
      return text;
    }
    // Reset regex lastIndex
    pricePattern.lastIndex = 0;
    percentagePattern.lastIndex = 0;

    // Determine replacement symbol/acronym
    let replaceSymbol: string | null = null;
    if (options && options.prices) {
      if (options.useCurrencySelection && options.currencySymbol) {
        replaceSymbol = options.currencySymbol;
      } else if (options.useCurrencyInput && options.customCurrency) {
        replaceSymbol = options.customCurrency;
      }
    }

    // First, handle currency amounts
    var result = text.replace(pricePattern, function(match: string): string {
      var currencySymbol = currencySymbols.find(function(symbol) { return match.includes(symbol); });
      if (!currencySymbol) return match;
      var isPrefix = match.startsWith(currencySymbol);
      var numberPart = match.replace(currencySymbol, '').trim();
      var anonymizedNumber = numberPart.replace(numberWithSeparatorPattern, function(num: string): string {
        var whole = num.split(/[.,]/)[0];
        var decimal = num.split(/[.,]/)[1];
        return '0'.repeat(whole.length) + (decimal ? '.' + '0'.repeat(decimal.length) : '');
      });
      // Replace symbol if requested
      if (replaceSymbol !== null && replaceSymbol !== undefined && replaceSymbol !== '') {
        return isPrefix ? replaceSymbol + anonymizedNumber : anonymizedNumber + replaceSymbol;
      } else {
        return isPrefix ? currencySymbol + anonymizedNumber : anonymizedNumber + currencySymbol;
      }
    });

    // Then, handle percentages
    result = result.replace(percentagePattern, function(match: string): string {
      var hasParens = match.startsWith('(') && match.endsWith(')');
      var number = match.replace(/[()%]/g, '');
      var zeros = '0'.repeat(number.replace('.', '').length);
      return hasParens ? '(' + zeros + '%)' : zeros + '%';
    });
    return result;
  } catch (e) {
    console.log('anonymizePrice error:', e);
    return text;
  }
}

// Full Lorem ipsum text for more natural-looking replacements
var loremIpsumText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum";

function generateLoremText(length: number): string {
  // Simply take a substring of the full Lorem ipsum text
  // If we need more text than we have, repeat the text
  var result = '';
  while (result.length < length) {
    result += loremIpsumText + ' ';
  }
  return result.substring(0, length);
}

function anonymizeText(node: TextNode, options: AnonymizeOptions): void {
  try {
    // Defensive: Only load font if node.fontName is a FontName (not figma.mixed)
    if (typeof node.fontName === 'object' && 'family' in node.fontName && 'style' in node.fontName) {
      figma.loadFontAsync(node.fontName as FontName).then(function() {
      var text = node.characters;
      const wasAnonymized = isTextAnonymized(text);
      // Only skip if already anonymized and NOT changing currency
      if (text.length === 1 || (wasAnonymized && !(options.prices && options.useCurrencySelection))) return;
      let textForProcessing = text;
      // If re-processing for currency change, strip the marker first
      if (wasAnonymized && options.prices && options.useCurrencySelection) {
        textForProcessing = text.slice(0, -ANONYMIZED_MARKER.length);
      }
      if (options.prices && (pricePattern.test(textForProcessing) || percentagePattern.test(textForProcessing))) {
        // Reset regex lastIndex
        pricePattern.lastIndex = 0;
        percentagePattern.lastIndex = 0;
        // Handle price anonymization with currency replacement if requested
        node.characters = markAsAnonymized(anonymizePrice(textForProcessing, options));
      } else if (options.products && !pricePattern.test(text)) {
        // Handle product name anonymization only if no prices present
        var targetLength = Math.max(2, text.length - 2);
        node.characters = markAsAnonymized(generateLoremText(targetLength));
      }
    });
    } // End if fontName is FontName
  } catch (e) {
    console.log('anonymizeText error:', e);
  }
}

// Utility: decode base64 to Uint8Array
// Pure JS base64 decoder for Figma plugin backend
function base64ToUint8Array(base64: string): Uint8Array {
  // Remove data URL prefix if present
  const base64Data = base64.includes(',') ? base64.split(',')[1] : base64;
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  let str = base64Data.replace(/=+$/, '');
  let output = [];

  for (let bc = 0, bs = 0, buffer, i = 0; (buffer = str.charAt(i++)); ~buffer &&
    (bs = bc % 4 ? bs * 64 + buffer : buffer,
      bc++ % 4) ? output.push(255 & bs >> (-2 * bc & 6)) : 0
  ) {
    buffer = chars.indexOf(buffer);
  }

  return new Uint8Array(output);
}

function anonymizeImage(node: SceneNode, options: AnonymizeOptions): Promise<void> {
  if (!options.images) return Promise.resolve();

  if ("fills" in node) {
    // Create a new array to modify since Figma's fills array is read-only
    var fills = (node.fills as Paint[]).slice();
    var hasImageFill = false;

    for (var i = 0; i < fills.length; i++) {
      var fill = fills[i];
      if (fill.type === "IMAGE") {
        hasImageFill = true;
        // Debug: log options and customPlaceholderImage
        try {
          // eslint-disable-next-line no-console
          console.log('[anonymizeImage] options.customPlaceholderImage:', options.customPlaceholderImage ? (typeof options.customPlaceholderImage + ' len=' + options.customPlaceholderImage.length) : 'none');
        } catch (e) {}
        let imageBytes: Uint8Array = placeholderImage;
        if (options.customPlaceholderImage && typeof options.customPlaceholderImage === 'string') {
          try {
            // eslint-disable-next-line no-console
            console.log('[anonymizeImage] Attempting to decode custom image...');
            imageBytes = base64ToUint8Array(options.customPlaceholderImage);
            // eslint-disable-next-line no-console
            console.log('[anonymizeImage] Decoded custom image bytes length:', imageBytes.length);
          } catch (e) {
            // eslint-disable-next-line no-console
            console.log('[anonymizeImage] Failed to decode custom image, using default.', e);
            imageBytes = placeholderImage;
          }
        } else {
          // eslint-disable-next-line no-console
          console.log('[anonymizeImage] No custom image, using default.');
        }
        var placeholderImageHash = figma.createImage(imageBytes);
        // Replace the original image fill with the placeholder
        fills[i] = {
          type: "IMAGE",
          imageHash: placeholderImageHash.hash,
          scaleMode: (fill as ImagePaint).scaleMode // Preserve original scaling mode
        };
      }
    }
    // Only update fills if we actually found and replaced an image
    if (hasImageFill) {
      node.fills = fills;
    }
  }
  return Promise.resolve();
}

// State flags for processing control
var isProcessing = false;  // Tracks if anonymization is running
var shouldStop = false;    // Flag to stop processing when requested

// Send initial state
figma.ui.postMessage({ 
  type: 'updateState',
  hasSelection: figma.currentPage.selection.length > 0
});

// Listen for selection changes
figma.on("selectionchange", function() {
  figma.ui.postMessage({ 
    type: 'updateState',
    state: 'selectionchange',
    hasSelection: figma.currentPage.selection.length > 0
  });
});

// Handle messages from the UI
// Defensive: log all incoming messages for debugging
figma.ui.onmessage = function(msg) {
  try {
    console.log('Received message from UI:', msg);
  } catch (e) {}

  switch (msg.type) {
    case 'stop':
      if (isProcessing) {
        shouldStop = true;
        isProcessing = false;
        figma.ui.postMessage({ 
          type: 'updateState',
          state: 'stop',
          message: 'Processing stopped',
          hasSelection: figma.currentPage.selection.length > 0
        });
      }
      break;

    case 'cancel':
      figma.closePlugin();
      break;

    case 'anonymize':
      if (!msg.options || isProcessing) return;
      
      var selection = figma.currentPage.selection;
      if (!selection.length || !selection.every(isFrameNode)) {
        figma.ui.postMessage({ 
          type: 'updateState',
          state: 'error',
          message: 'Please select at least one frame',
          hasSelection: false
        });
        return;
      }

      isProcessing = true;
      shouldStop = false;
      figma.ui.postMessage({ 
        type: 'updateState',
        state: 'start',
        hasSelection: true
      });

      try {
        // Process each selected frame
        var promises: Promise<void>[] = [];
        for (var i = 0; i < selection.length; i++) {
          if (shouldStop) break;
          promises.push(processNode(selection[i], msg.options));
        }

        // Notify completion and reset state
        Promise.all(promises).then(() => {
          isProcessing = false;
          shouldStop = false;
          figma.ui.postMessage({ 
            type: 'updateState',
            state: shouldStop ? 'stop' : 'complete',
            message: shouldStop ? 'Processing stopped' : 'Anonymization complete!',
            hasSelection: figma.currentPage.selection.length > 0
          });
        });
      } catch (e) {
        isProcessing = false;
        shouldStop = false;
        figma.ui.postMessage({ 
          type: 'updateState',
          state: 'error',
          message: 'An error occurred during processing',
          hasSelection: figma.currentPage.selection.length > 0
        });
      }
      break;
  }
};

// Helper to check if a node is a frame
function isFrameNode(node: SceneNode): boolean {
  return node.type === "FRAME";
}

// Process a single node and its children recursively
function processNode(node: SceneNode, options: AnonymizeOptions): Promise<void> {
  if (shouldStop) return Promise.resolve();  // Exit if stop was requested

  var promises: Promise<void>[] = [];

  // Process text nodes and image fills
  if (node.type === "TEXT") {
    anonymizeText(node, options);
  } else if (options.images && ("fills" in node)) {
    promises.push(anonymizeImage(node, options));
  }

  // Process children if they exist
  if ('children' in node) {
    for (var i = 0; i < node.children.length; i++) {
      if (shouldStop) break;
      promises.push(processNode(node.children[i], options));
    }
  }

  return Promise.all(promises).then(() => {});
}
